import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix, classification_report
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt

ecg_data=pd.read_csv("/content/csv_result-ECG5000_TEST.csv")

df_num=ecg_data.select_dtypes(include=[np.number])
scaler=StandardScaler()
df_scaled=scaler.fit_transform(df_num)

df_scaled=pd.DataFrame(df_scaled, columns=df_num.columns)
scaler=StandardScaler()
x=scaler.fit_transform(ecg_data.values)
y=x

x_train,x_test,y_train, y_test=train_test_split(x,y,test_size=0.2, random_state=42)

input_dim=x_train.shape[1]

encoder=models.Sequential([
    layers.Input(shape=(input_dim,)),
    layers.Dense(32,activation='relu'),
    layers.Dense(16,activation='relu'),
    layers.Dense(8,activation='relu')
])
    
decoder=models.Sequential([
    layers.Input(shape=(8,)),
    layers.Dense(16,activation='relu'),
    layers.Dense(32,activation='relu'),
    layers.Dense(input_dim,activation='linear')
])

autoencoder=models.Sequential([
    encoder, decoder
])

autoencoder.compile(optimizer="adam", loss="mean_squared_error")
autoencoder.fit(x_train, y_train, epochs=100, batch_size=32, shuffle=True)

y_pred=autoencoder.predict(x_test)
mse=np.mean(np.power(x_test-y_pred,2), axis=1)
threshold=np.percentile(mse,95)
anomalies=mse>threshold

num_anomalies=np.sum(anomalies)
print(f"Num of Anomalies: {num_anomalies}")

plt.figure(figsize=(12,6))
plt.plot(mse, marker='o',linestyle="",markersize=3,label="MSE")
plt.axhline(threshold,color="r",linestyle="--",label="Anomaly Threshold")
plt.xlabel("Sample index")
plt.ylabel("Mse")
plt.title("Anomaly Detection Results")
plt.legend()
plt.show()

plt.figure(figsize=(12,6))
plt.plot(x_test[0], label="Original ECG")
plt.plot(y_pred[0], label='Reconstructed ECG')
plt.xlabel("Time")
plt.ylabel("Amplitude")
plt.legend()
plt.title("Normal ECG")
plt.show()

y_true=np.zeros(len(x_test))
print("Confusion Matrix")
print(confusion_matrix(anomalies, anomalies))

print("Classification Report")
print(classification_report(anomalies, anomalies))